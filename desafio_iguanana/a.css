
from django.db import models
from django.urls import reverse
from django.utils import timezone



class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Descuentos(models.Model):
    id_descuento = models.CharField(primary_key=True, max_length=30)
    nombre = models.CharField(max_length=30)
    porcentaje_descuento = models.IntegerField()
    activo = models.BooleanField()

    def __str__(self) -> str:
        return self.id_descuento
    
    def get_absolute_url(self):
        return reverse("editar manga", args=[self.id_descuento], kwargs={'pk': self.id_descuento})
    
    class Meta:
        managed = False
        db_table = 'descuentos'


class DetallesCompra(models.Model):
    id_compra = models.IntegerField(primary_key=True)
    id_usuario = models.ForeignKey(AuthUser, models.SET_NULL, db_column='id_usuario', blank=True, null=True)
    total = models.IntegerField()
    tipo_compra = models.CharField(max_length=15)
    direccion = models.CharField(max_length=40, blank=True, null=True)
    hora_compra = models.TimeField()
    fecha_compra = models.DateField()

    class Meta:
        managed = False
        db_table = 'detalles_compra'

    def __str__(self):
        return str(self.id_compra)

class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class InventarioMangas(models.Model):
    manga_id = models.CharField(primary_key=True, max_length=15)
    nombre_manga = models.CharField(max_length=40, null=False)
    autor = models.CharField(max_length=40, null=False)
    nro_tomo = models.IntegerField(null=False)
    stock = models.IntegerField(null= False)
    editorial = models.CharField(max_length=20, null= False)
    traduccion = models.CharField(max_length=10, null= False)
    precio = models.IntegerField(null= False)
    id_descuento = models.ForeignKey(Descuentos, models.SET_NULL, db_column='id_descuento', blank=True, null=True)
    imagen_tomo = models.FileField(upload_to= 'Templates/manga/', default= f'Templates/manga/{manga_id}')
    fecha_adicion= models.DateField(default= timezone.now)

    def __str__(self):
        return str(self.manga_id)
    
    def get_absolute_url(self):
        return reverse("editar manga", args=[self.manga_id], kwargs={'pk': self.manga_id})

    class Meta:
        managed = False
        db_table = 'inventario_mangas'


class ItemsCompra(models.Model):
    item_id = models.AutoField(primary_key=True)
    id_compra = models.ForeignKey(DetallesCompra, models.CASCADE, db_column='id_compra')
    manga_id = models.ForeignKey(InventarioMangas, models.DO_NOTHING)
    cantidad = models.IntegerField()

    
    class Meta:
        managed = False
        db_table = 'items_compra'

    def get_absolute_url(self):
        return reverse("detalles compra", args=[self.id_compra], kwargs={'pk': self.id_compra})
                       
class ListaDeseados(models.Model):
    id_usuario = models.OneToOneField(AuthUser, models.CASCADE, db_column='id_usuario', primary_key=True)
    manga_id = models.ForeignKey(InventarioMangas, models.CASCADE)
    disponibilidad = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'lista_deseados'
        unique_together = (('id_usuario', 'manga_id'),)